import { cn } from '@ap/utils/cn';
{{#if hasMotion}}
import { motion, type MotionProps } from 'motion/react';
{{/if}}
{{#if stateful}}
import { useState } from 'react';
{{/if}}
{{#if hasVariant}}
import { tv } from 'tailwind-variants';
{{/if}}
{{#if hasChildren}}
import { type ComponentPropsWithChildren } from '../../types/component-prop-types';
{{else}}
import { type ComponentPropsWithoutChildren } from '../../types/component-prop-types';
{{/if}}

{{#if hasVariant}}
const {{componentName}}Variants = tv({
  base: '',
  variants: {
    variant: {
      default: {}
    },
    size: {
      sm: '',
      md: '',
      lg: '',
      xl: '',
    },
  },
  defaultVariants: {
    variant: 'default',
  },
});
{{/if}}

type {{pascalCase componentName}}PropsType = {
  {{#if hasMotion}}
  motionProps?: Omit<MotionProps, 'animate' | 'initial' | 'exit'>;
  animate?: boolean;
  {{/if}}
  // Add other props here
}

export interface {{pascalCase componentName}}Props extends {{getComponentInterface hasChildren hasVariant htmlElement componentName}} {}

export const {{pascalCase componentName}} = ({{getComponentProps hasChildren hasVariant hasMotion}}: {{pascalCase componentName}}Props) => {
  {{#if stateful}}
  const [state, setState] = useState(0);
  {{/if}}

  return (
    <{{htmlElement}} className={cn({{componentName}}Variants({variant: variant, size: size}), className)} ref={ref} {...props}>
      {{#if hasChildren}}
      {children}
      {{/if}}
    </{{htmlElement}}>
  );
};