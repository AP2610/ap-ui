import { cn } from '@ap/utils/cn';
{{#if stateful}}
import { useState } from 'react';
{{/if}}
{{#if hasVariant}}
import { tv, type VariantProps } from 'tailwind-variants';
{{/if}}
{{#if hasChildren}}
import { type ComponentPropsWithChildren } from '../../types/component-prop-types';
{{else}}
import { type ComponentPropsWithoutChildren } from '../../types/component-prop-types';
{{/if}}
{{#if hasVariant}}

const {{componentName}}Variants = tv({
  base: '',
  variants: {
    variant: {
      default: {}
    },
    size: {
      sm: '',
      md: '',
      lg: '',
      xl: '',
    },
  },
  defaultVariants: {
    variant: 'default',
  },
});

{{/if}}
{{#if hasVariant}}
type {{pascalCase componentName}}Variants = VariantProps<typeof {{componentName}}Variants>;

{{/if}}
type {{pascalCase componentName}}PropsType = {
  // Add other props here
}

export type {{pascalCase componentName}}Props = {{{getComponentType hasChildren hasVariant htmlElement componentName}}};

export const {{pascalCase componentName}} = ({{getComponentProps hasChildren hasVariant}}: {{pascalCase componentName}}Props) => {
  {{#if stateful}}
  const [state, setState] = useState(0);

  {{/if}}
  return (
    <{{htmlElement}} className={{getClassName hasVariant hasSize componentName}} ref={ref} {...props}>
      {{#if hasChildren}}
      {children}
      {{else}}
      {{{componentName}}}
      {{/if}}
    </{{htmlElement}}>
  );
};